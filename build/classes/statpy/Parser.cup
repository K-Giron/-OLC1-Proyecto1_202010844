
// ------------  Paquete e importaciones ------------
package statpy;

import java_cup.runtime.*;


//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
        System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
        data.Info.listaErroresStatpy.add(new data.Error("Error Sintactico", "No reconocido el caracter: "+ s.value,
                s.right, s.left));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
        data.Info.listaErroresStatpy.add(new data.Error("Error Sintactico", "No reconocido el caracter: "+ s.value,
                s.right, s.left));
}

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales
terminal String ENTERO,ID,DECIMAL,TCHAR;
terminal String AND,OR,NOT;
terminal String POR, MAS, IGUAL,DIVISION,MENOS,TRUE,FALSE;
terminal String MAYOR, MENOR, MAYORIGUAL,MENORIGUAL,IGUALIGUAL,DISTINTO;
terminal String PARENTESIS_A, PARENTESIS_C,TEXTOENTRECOMILLAS,LLAVE_A,LLAVE_C;
terminal String PUNTOYCOMA, PUNTO,APOSTROFE,DOSPUNTOS;
terminal String CONSOLE,WRITE;
terminal String IF,ELSE,WHILE,DO,FOR,SWITCH,CASE,DEFAULT,BREAK,VOID,MAIN;
terminal String INT,DOUBLE,CHAR,BOOL,STRING;

//------> Declaración de no terminales
non terminal inicio;
non terminal print_switch,print_case,print_default;
non terminal asignacion, impresion,tipo_if,tipo_while,tipo_for,tipo_dato,tipo_switch,tipo_void,tipo_break;
non terminal lista_instr,instr_if,instr_while,instr_do,instr_for,instr_switch,instr_case,instr_void;
non terminal comparadores;
non terminal instruccion;
non terminal expresion;

//------> precedencia
precedence left AND,OR;
precedence left IGUALIGUAL,DISTINTO;
precedence left MAYOR,MENOR,MAYORIGUAL,MENORIGUAL;
precedence left MAS,MENOS;
precedence left POR,DIVISION;


//------> Definir Simbolo Inicial
start with inicio; 


// ------------>  Producciones  <------------

inicio ::= lista_instr
;

lista_instr ::= lista_instr instruccion
        | instruccion
;

instruccion::= tipo_if:val                                                       {:  :}
    | tipo_while                                                                        {: :}
    | tipo_for                                                                  {: :}
    | tipo_switch                                                           {: :}
    | tipo_void                                                               {: :}
    | tipo_break PUNTOYCOMA                                                     {: :}
    | asignacion:val PUNTOYCOMA                          {: statpy.Parser.resultado= statpy.Parser.resultado+val.toString()+" \n" ;:}
    | impresion:val PUNTOYCOMA                      {: statpy.Parser.resultado= statpy.Parser.resultado+val.toString()+" \n" ; :}
    | error PUNTOYCOMA
;

impresion ::= CONSOLE PUNTO WRITE PARENTESIS_A expresion:val PARENTESIS_C  
                        {: RESULT= "print("+ val.toString()+")";  :}
;
tipo_if::= instr_if lista_instr LLAVE_C                               
;
instr_if ::= IF:val PARENTESIS_A expresion:var PARENTESIS_C LLAVE_A
                            {: statpy.Parser.resultado += val.toString()+" " + var.toString() + ":\n"; :}  
                | ELSE:val LLAVE_A
                            {: statpy.Parser.resultado += val.toString()+ ":\n"; :}  
                | ELSE IF:val PARENTESIS_A expresion:var PARENTESIS_C LLAVE_A
                            {: statpy.Parser.resultado += "elif "+var.toString()+ ":\n"; :}  
;
tipo_while::= instr_while lista_instr LLAVE_C
                    |  instr_do lista_instr LLAVE_C WHILE PARENTESIS_A expresion:var PARENTESIS_C PUNTOYCOMA
                            {: statpy.Parser.resultado += var.toString()+" " + ":\n"; :}
                        
; 
instr_while ::= WHILE:val PARENTESIS_A expresion:var PARENTESIS_C LLAVE_A 
                            {: statpy.Parser.resultado += val.toString()+" " + var.toString() + ":\n"; :}
;
instr_do ::= DO:val LLAVE_A        {: statpy.Parser.resultado += "while"+" " + ":\n"; :}
;

tipo_for::= instr_for lista_instr LLAVE_C
;

instr_for::= FOR:pal PARENTESIS_A tipo_dato ID:nombre IGUAL:signo ENTERO:ini PUNTOYCOMA ID comparadores:var ENTERO:fin PUNTOYCOMA ID MAS MAS PARENTESIS_C LLAVE_A
                    {: statpy.Parser.resultado += pal.toString()+" " + nombre.toString() +" in range("+ ini.toString()+","+fin.toString()+")"+ ":\n";  :}
;

tipo_switch ::= print_switch instr_switch LLAVE_C
;
print_switch::= SWITCH:val PARENTESIS_A expresion:var PARENTESIS_C LLAVE_A  
                                {: statpy.Parser.resultado +="def "+ val.toString()+" ("+var.toString()+ "):\n"+"switcher = {\n"; :}
;
instr_switch ::= instr_switch instr_case
                        | instr_case  
;
instr_case::= print_case lista_instr   
                     | print_case
                     | print_default instruccion            
;
print_case::=CASE ENTERO:var DOSPUNTOS ID:val IGUAL ENTERO:var2 PUNTOYCOMA
                        {: statpy.Parser.resultado +=var.toString()+": "+val.toString()+" = "+var2.toString()+ ",\n";
                            data.Info.ultimoCase=Integer.parseInt(var);
                             :}
;
print_default::= DEFAULT DOSPUNTOS {: data.Info.ultimoCase++; statpy.Parser.resultado += data.Info.ultimoCase+": "; :}
; 
tipo_dato::=INT:val                                         {:  :}
                | DOUBLE:val                                {: :}
                | CHAR:val                                     {:  :}
                | BOOL:val                                      {:  :}
                | STRING:val                                   {: :}
;
tipo_void::= instr_void lista_instr LLAVE_C
;
instr_void::= VOID:val MAIN:var PARENTESIS_A PARENTESIS_C LLAVE_A {: statpy.Parser.resultado +="def"+" " +var.toString()+ "():\n"; :}
;

tipo_break::= BREAK:var             {: statpy.Parser.resultado += var.toString()+ "\n";  :}
;
asignacion ::= tipo_dato ID:nombre IGUAL:signo expresion:var           {: RESULT= nombre.toString()+" "+signo.toString()+" "+var.toString(); :}
                        | ID:nombre IGUAL:signo expresion:var           {: RESULT= nombre.toString()+" "+signo.toString()+" "+var.toString(); :}
                        | tipo_dato ID:nombre                                       {: RESULT= nombre.toString(); :}
;
comparadores::= MENORIGUAL
                            | MAYOR
                            | MENOR
                            | MAYORIGUAL
;

expresion::= expresion:a MAS expresion:b                {: RESULT=a.toString()+" + "+b.toString(); :}
        | expresion:a POR expresion:b                {: RESULT=a.toString()+" * "+b.toString(); :}
        | expresion:a DIVISION expresion:b                {: RESULT=a.toString()+" / "+b.toString(); :}
        | expresion:a MENOS expresion:b                {: RESULT=a.toString()+" - "+b.toString(); :}
        | expresion:a MAYOR expresion:b                {: RESULT=a.toString()+" > "+b.toString(); :}
        | expresion:a MENOR expresion:b                {: RESULT=a.toString()+" < "+b.toString(); :}
        | expresion:a MAYORIGUAL expresion:b                {: RESULT=a.toString()+" >= "+b.toString(); :}
        | expresion:a MENORIGUAL expresion:b                {: RESULT=a.toString()+" <= "+b.toString(); :}
        | expresion:a IGUALIGUAL expresion:b                {: RESULT=a.toString()+" == "+b.toString(); :}
        | expresion:a DISTINTO expresion:b                {: RESULT=a.toString()+" != "+b.toString(); :}
        | NOT:val expresion:a                                     {: RESULT = " not "+a.toString(); :}
        | expresion:a AND expresion:b                {: RESULT=a.toString()+" and "+b.toString(); :}
        | expresion:a OR expresion:b                {: RESULT=a.toString()+" or "+b.toString(); :}
        | TRUE:val                                 {: RESULT =val; :}
        | FALSE:val                  {: RESULT = val; :}
        | ENTERO:val                                    {: RESULT = val; :}
        | DECIMAL:val                                    {: RESULT = val; :}
        | ID:val                                        {: RESULT = val; :}
        | TEXTOENTRECOMILLAS:val       {: RESULT = val; :}
        | TEXTOENTRECOMILLAS:val MAS expresion:a       {: RESULT =val.toString()+" , "+a.toString(); :}
        | TCHAR: val                                    {: RESULT = val; :}

;
