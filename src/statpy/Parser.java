
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package statpy;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\003\000\002\017" +
    "\004\000\002\017\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\004\000\002\030\004\000\002" +
    "\030\004\000\002\030\004\000\002\007\010\000\002\010" +
    "\005\000\002\020\007\000\002\020\004\000\002\020\010" +
    "\000\002\011\005\000\002\011\012\000\002\021\007\000" +
    "\002\022\004\000\002\012\005\000\002\023\022\000\002" +
    "\014\005\000\002\003\007\000\002\024\004\000\002\024" +
    "\003\000\002\025\004\000\002\025\003\000\002\025\004" +
    "\000\002\004\011\000\002\005\004\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\015\005\000\002\026\007\000\002\016" +
    "\003\000\002\006\006\000\002\006\005\000\002\006\004" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\004\000\002\032\005\000" +
    "\002\032\005\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\005\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\042\003\041\005\027\041\023\043\024\044" +
    "\005\045\013\046\031\047\044\050\022\053\036\054\045" +
    "\056\011\057\046\060\012\061\042\062\034\001\002\000" +
    "\042\003\041\005\027\041\023\043\024\044\005\045\013" +
    "\046\031\047\044\050\022\053\036\054\045\056\011\057" +
    "\046\060\012\061\042\062\034\001\002\000\006\033\235" +
    "\043\234\001\002\000\052\002\ufffd\003\ufffd\005\ufffd\034" +
    "\ufffd\041\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd" +
    "\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\056\ufffd\057" +
    "\ufffd\060\ufffd\061\ufffd\062\ufffd\001\002\000\044\002\000" +
    "\003\041\005\027\041\023\043\024\044\005\045\013\046" +
    "\031\047\044\050\022\053\036\054\045\056\011\057\046" +
    "\060\012\061\042\062\034\001\002\000\042\003\041\005" +
    "\027\041\023\043\024\044\005\045\013\046\031\047\044" +
    "\050\022\053\036\054\045\056\011\057\046\060\012\061" +
    "\042\062\034\001\002\000\004\005\uffdf\001\002\000\004" +
    "\005\uffdd\001\002\000\004\030\226\001\002\000\052\002" +
    "\ufff8\003\ufff8\005\ufff8\034\ufff8\041\ufff8\043\ufff8\044\ufff8" +
    "\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053" +
    "\ufff8\054\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8" +
    "\001\002\000\042\003\041\005\027\041\023\043\024\044" +
    "\005\045\013\046\031\047\044\050\022\053\036\054\045" +
    "\056\011\057\046\060\012\061\042\062\034\001\002\000" +
    "\052\002\ufffe\003\ufffe\005\ufffe\034\ufffe\041\ufffe\043\ufffe" +
    "\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052" +
    "\ufffe\053\ufffe\054\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe" +
    "\062\ufffe\001\002\000\042\003\041\005\027\041\023\043" +
    "\024\044\005\045\013\046\031\047\044\050\022\053\036" +
    "\054\045\056\011\057\046\060\012\061\042\062\034\001" +
    "\002\000\052\002\ufffb\003\ufffb\005\ufffb\034\ufffb\041\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\052\ufffb\053\ufffb\054\ufffb\056\ufffb\057\ufffb\060\ufffb" +
    "\061\ufffb\062\ufffb\001\002\000\052\002\ufff9\003\ufff9\005" +
    "\ufff9\034\ufff9\041\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9" +
    "\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\056" +
    "\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\001\002\000\004" +
    "\030\211\001\002\000\004\036\204\001\002\000\004\030" +
    "\200\001\002\000\052\002\ufffc\003\ufffc\005\ufffc\034\ufffc" +
    "\041\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050" +
    "\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\056\ufffc\057\ufffc" +
    "\060\ufffc\061\ufffc\062\ufffc\001\002\000\004\005\175\001" +
    "\002\000\004\015\130\001\002\000\004\035\127\001\002" +
    "\000\004\033\126\001\002\000\004\002\125\001\002\000" +
    "\042\003\041\005\027\041\023\043\024\044\005\045\013" +
    "\046\031\047\044\050\022\053\036\054\045\056\011\057" +
    "\046\060\012\061\042\062\034\001\002\000\004\005\uffdb" +
    "\001\002\000\006\051\104\052\101\001\002\000\004\035" +
    "\uffd8\001\002\000\004\035\100\001\002\000\052\002\ufffa" +
    "\003\ufffa\005\ufffa\034\ufffa\041\ufffa\043\ufffa\044\ufffa\045" +
    "\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa" +
    "\054\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\001" +
    "\002\000\004\035\077\001\002\000\004\005\uffdc\001\002" +
    "\000\004\035\076\001\002\000\004\030\053\001\002\000" +
    "\004\055\047\001\002\000\004\005\uffde\001\002\000\004" +
    "\030\050\001\002\000\004\031\051\001\002\000\004\033" +
    "\052\001\002\000\042\003\uffd9\005\uffd9\041\uffd9\043\uffd9" +
    "\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\053\uffd9\054" +
    "\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\001\002" +
    "\000\014\056\011\057\046\060\012\061\042\062\034\001" +
    "\002\000\004\005\055\001\002\000\004\015\056\001\002" +
    "\000\004\004\057\001\002\000\004\035\060\001\002\000" +
    "\004\005\061\001\002\000\012\022\065\023\064\024\063" +
    "\025\062\001\002\000\004\004\uffd4\001\002\000\004\004" +
    "\uffd1\001\002\000\004\004\uffd2\001\002\000\004\004\uffd3" +
    "\001\002\000\004\004\067\001\002\000\004\035\070\001" +
    "\002\000\004\005\071\001\002\000\004\014\072\001\002" +
    "\000\004\014\073\001\002\000\004\031\074\001\002\000" +
    "\004\033\075\001\002\000\042\003\uffe9\005\uffe9\041\uffe9" +
    "\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\053" +
    "\uffe9\054\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9" +
    "\001\002\000\052\002\ufff7\003\ufff7\005\ufff7\034\ufff7\041" +
    "\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7" +
    "\051\ufff7\052\ufff7\053\ufff7\054\ufff7\056\ufff7\057\ufff7\060" +
    "\ufff7\061\ufff7\062\ufff7\001\002\000\052\002\ufff4\003\ufff4" +
    "\005\ufff4\034\ufff4\041\ufff4\043\ufff4\044\ufff4\045\ufff4\046" +
    "\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4" +
    "\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\001\002\000" +
    "\052\002\ufff5\003\ufff5\005\ufff5\034\ufff5\041\ufff5\043\ufff5" +
    "\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052" +
    "\ufff5\053\ufff5\054\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5" +
    "\062\ufff5\001\002\000\004\040\122\001\002\000\010\034" +
    "\120\051\104\052\101\001\002\000\010\034\uffe5\051\uffe5" +
    "\052\uffe5\001\002\000\004\004\112\001\002\000\050\003" +
    "\041\005\027\034\uffe3\041\023\043\024\044\005\045\013" +
    "\046\031\047\044\050\022\051\uffe3\052\uffe3\053\036\054" +
    "\045\056\011\057\046\060\012\061\042\062\034\001\002" +
    "\000\042\003\041\005\027\041\023\043\024\044\005\045" +
    "\013\046\031\047\044\050\022\053\036\054\045\056\011" +
    "\057\046\060\012\061\042\062\034\001\002\000\010\034" +
    "\uffe2\051\uffe2\052\uffe2\001\002\000\050\003\041\005\027" +
    "\034\uffe4\041\023\043\024\044\005\045\013\046\031\047" +
    "\044\050\022\051\uffe4\052\uffe4\053\036\054\045\056\011" +
    "\057\046\060\012\061\042\062\034\001\002\000\052\002" +
    "\uffff\003\uffff\005\uffff\034\uffff\041\uffff\043\uffff\044\uffff" +
    "\045\uffff\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053" +
    "\uffff\054\uffff\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff" +
    "\001\002\000\004\040\113\001\002\000\004\005\114\001" +
    "\002\000\004\015\115\001\002\000\004\004\116\001\002" +
    "\000\004\035\117\001\002\000\050\003\uffe1\005\uffe1\034" +
    "\uffe1\041\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1" +
    "\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\056\uffe1\057" +
    "\uffe1\060\uffe1\061\uffe1\062\uffe1\001\002\000\052\002\uffe8" +
    "\003\uffe8\005\uffe8\034\uffe8\041\uffe8\043\uffe8\044\uffe8\045" +
    "\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8" +
    "\054\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\001" +
    "\002\000\010\034\uffe6\051\uffe6\052\uffe6\001\002\000\042" +
    "\003\uffe0\005\uffe0\041\uffe0\043\uffe0\044\uffe0\045\uffe0\046" +
    "\uffe0\047\uffe0\050\uffe0\053\uffe0\054\uffe0\056\uffe0\057\uffe0" +
    "\060\uffe0\061\uffe0\062\uffe0\001\002\000\044\003\041\005" +
    "\027\034\124\041\023\043\024\044\005\045\013\046\031" +
    "\047\044\050\022\053\036\054\045\056\011\057\046\060" +
    "\012\061\042\062\034\001\002\000\052\002\uffea\003\uffea" +
    "\005\uffea\034\uffea\041\uffea\043\uffea\044\uffea\045\uffea\046" +
    "\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea" +
    "\056\uffea\057\uffea\060\uffea\061\uffea\062\uffea\001\002\000" +
    "\004\002\001\001\002\000\042\003\uffeb\005\uffeb\041\uffeb" +
    "\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\053" +
    "\uffeb\054\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb" +
    "\001\002\000\052\002\ufff6\003\ufff6\005\ufff6\034\ufff6\041" +
    "\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6" +
    "\051\ufff6\052\ufff6\053\ufff6\054\ufff6\056\ufff6\057\ufff6\060" +
    "\ufff6\061\ufff6\062\ufff6\001\002\000\022\004\132\005\136" +
    "\006\131\007\137\012\140\020\133\021\135\032\141\001" +
    "\002\000\036\010\uffc0\011\uffc0\013\uffc0\014\uffc0\016\uffc0" +
    "\017\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\031\uffc0\035\uffc0\001\002\000\036\010\uffc1\011\uffc1" +
    "\013\uffc1\014\uffc1\016\uffc1\017\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\027\uffc1\031\uffc1\035\uffc1\001\002" +
    "\000\036\010\uffc3\011\uffc3\013\uffc3\014\uffc3\016\uffc3\017" +
    "\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3" +
    "\031\uffc3\035\uffc3\001\002\000\034\010\144\011\157\013" +
    "\150\014\151\016\155\017\146\022\153\023\147\024\152" +
    "\025\145\026\154\027\156\035\uffd6\001\002\000\036\010" +
    "\uffc2\011\uffc2\013\uffc2\014\uffc2\016\uffc2\017\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\031\uffc2\035" +
    "\uffc2\001\002\000\036\010\uffbf\011\uffbf\013\uffbf\014\uffbf" +
    "\016\uffbf\017\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026" +
    "\uffbf\027\uffbf\031\uffbf\035\uffbf\001\002\000\036\010\uffbc" +
    "\011\uffbc\013\uffbc\014\uffbc\016\uffbc\017\uffbc\022\uffbc\023" +
    "\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\031\uffbc\035\uffbc" +
    "\001\002\000\022\004\132\005\136\006\131\007\137\012" +
    "\140\020\133\021\135\032\141\001\002\000\036\010\uffbe" +
    "\011\uffbe\013\uffbe\014\142\016\uffbe\017\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\031\uffbe\035\uffbe" +
    "\001\002\000\022\004\132\005\136\006\131\007\137\012" +
    "\140\020\133\021\135\032\141\001\002\000\036\010\uffbd" +
    "\011\uffbd\013\150\014\uffbd\016\155\017\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\031\uffbd\035\uffbd" +
    "\001\002\000\022\004\132\005\136\006\131\007\137\012" +
    "\140\020\133\021\135\032\141\001\002\000\022\004\132" +
    "\005\136\006\131\007\137\012\140\020\133\021\135\032" +
    "\141\001\002\000\022\004\132\005\136\006\131\007\137" +
    "\012\140\020\133\021\135\032\141\001\002\000\022\004" +
    "\132\005\136\006\131\007\137\012\140\020\133\021\135" +
    "\032\141\001\002\000\022\004\132\005\136\006\131\007" +
    "\137\012\140\020\133\021\135\032\141\001\002\000\022" +
    "\004\132\005\136\006\131\007\137\012\140\020\133\021" +
    "\135\032\141\001\002\000\022\004\132\005\136\006\131" +
    "\007\137\012\140\020\133\021\135\032\141\001\002\000" +
    "\022\004\132\005\136\006\131\007\137\012\140\020\133" +
    "\021\135\032\141\001\002\000\022\004\132\005\136\006" +
    "\131\007\137\012\140\020\133\021\135\032\141\001\002" +
    "\000\022\004\132\005\136\006\131\007\137\012\140\020" +
    "\133\021\135\032\141\001\002\000\022\004\132\005\136" +
    "\006\131\007\137\012\140\020\133\021\135\032\141\001" +
    "\002\000\022\004\132\005\136\006\131\007\137\012\140" +
    "\020\133\021\135\032\141\001\002\000\036\010\uffc4\011" +
    "\uffc4\013\150\014\151\016\155\017\146\022\153\023\147" +
    "\024\152\025\145\026\154\027\156\031\uffc4\035\uffc4\001" +
    "\002\000\036\010\uffc7\011\uffc7\013\150\014\151\016\155" +
    "\017\146\022\153\023\147\024\152\025\145\026\uffc7\027" +
    "\uffc7\031\uffc7\035\uffc7\001\002\000\036\010\uffce\011\uffce" +
    "\013\uffce\014\uffce\016\uffce\017\uffce\022\uffce\023\uffce\024" +
    "\uffce\025\uffce\026\uffce\027\uffce\031\uffce\035\uffce\001\002" +
    "\000\036\010\uffc8\011\uffc8\013\150\014\151\016\155\017" +
    "\146\022\153\023\147\024\152\025\145\026\uffc8\027\uffc8" +
    "\031\uffc8\035\uffc8\001\002\000\036\010\uffcc\011\uffcc\013" +
    "\150\014\151\016\155\017\146\022\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\031\uffcc\035\uffcc\001\002\000" +
    "\036\010\uffca\011\uffca\013\150\014\151\016\155\017\146" +
    "\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\031" +
    "\uffca\035\uffca\001\002\000\036\010\uffd0\011\uffd0\013\150" +
    "\014\uffd0\016\155\017\uffd0\022\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\031\uffd0\035\uffd0\001\002\000\036" +
    "\010\uffcf\011\uffcf\013\uffcf\014\uffcf\016\uffcf\017\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\031\uffcf" +
    "\035\uffcf\001\002\000\036\010\uffcb\011\uffcb\013\150\014" +
    "\151\016\155\017\146\022\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\026\uffcb\027\uffcb\031\uffcb\035\uffcb\001\002\000\036\010" +
    "\uffcd\011\uffcd\013\150\014\uffcd\016\155\017\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\031\uffcd\035" +
    "\uffcd\001\002\000\036\010\uffc9\011\uffc9\013\150\014\151" +
    "\016\155\017\146\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\031\uffc9\035\uffc9\001\002\000\036\010\uffc5" +
    "\011\uffc5\013\150\014\151\016\155\017\146\022\153\023" +
    "\147\024\152\025\145\026\154\027\156\031\uffc5\035\uffc5" +
    "\001\002\000\036\010\144\011\157\013\150\014\151\016" +
    "\155\017\146\022\153\023\147\024\152\025\145\026\154" +
    "\027\156\031\uffc6\035\uffc6\001\002\000\006\015\176\035" +
    "\uffd5\001\002\000\022\004\132\005\136\006\131\007\137" +
    "\012\140\020\133\021\135\032\141\001\002\000\034\010" +
    "\144\011\157\013\150\014\151\016\155\017\146\022\153" +
    "\023\147\024\152\025\145\026\154\027\156\035\uffd7\001" +
    "\002\000\022\004\132\005\136\006\131\007\137\012\140" +
    "\020\133\021\135\032\141\001\002\000\034\010\144\011" +
    "\157\013\150\014\151\016\155\017\146\022\153\023\147" +
    "\024\152\025\145\026\154\027\156\031\202\001\002\000" +
    "\004\033\203\001\002\000\042\003\ufff1\005\ufff1\041\ufff1" +
    "\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\053" +
    "\ufff1\054\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1" +
    "\001\002\000\004\042\205\001\002\000\004\030\206\001" +
    "\002\000\022\004\132\005\136\006\131\007\137\012\140" +
    "\020\133\021\135\032\141\001\002\000\034\010\144\011" +
    "\157\013\150\014\151\016\155\017\146\022\153\023\147" +
    "\024\152\025\145\026\154\027\156\031\210\001\002\000" +
    "\004\035\ufff3\001\002\000\022\004\132\005\136\006\131" +
    "\007\137\012\140\020\133\021\135\032\141\001\002\000" +
    "\034\010\144\011\157\013\150\014\151\016\155\017\146" +
    "\022\153\023\147\024\152\025\145\026\154\027\156\031" +
    "\213\001\002\000\004\033\214\001\002\000\006\051\uffe7" +
    "\052\uffe7\001\002\000\044\003\041\005\027\034\216\041" +
    "\023\043\024\044\005\045\013\046\031\047\044\050\022" +
    "\053\036\054\045\056\011\057\046\060\012\061\042\062" +
    "\034\001\002\000\052\002\uffee\003\uffee\005\uffee\034\uffee" +
    "\041\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050" +
    "\uffee\051\uffee\052\uffee\053\uffee\054\uffee\056\uffee\057\uffee" +
    "\060\uffee\061\uffee\062\uffee\001\002\000\044\003\041\005" +
    "\027\034\220\041\023\043\024\044\005\045\013\046\031" +
    "\047\044\050\022\053\036\054\045\056\011\057\046\060" +
    "\012\061\042\062\034\001\002\000\004\045\221\001\002" +
    "\000\004\030\222\001\002\000\022\004\132\005\136\006" +
    "\131\007\137\012\140\020\133\021\135\032\141\001\002" +
    "\000\034\010\144\011\157\013\150\014\151\016\155\017" +
    "\146\022\153\023\147\024\152\025\145\026\154\027\156" +
    "\031\224\001\002\000\004\035\225\001\002\000\052\002" +
    "\uffed\003\uffed\005\uffed\034\uffed\041\uffed\043\uffed\044\uffed" +
    "\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053" +
    "\uffed\054\uffed\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed" +
    "\001\002\000\022\004\132\005\136\006\131\007\137\012" +
    "\140\020\133\021\135\032\141\001\002\000\034\010\144" +
    "\011\157\013\150\014\151\016\155\017\146\022\153\023" +
    "\147\024\152\025\145\026\154\027\156\031\230\001\002" +
    "\000\004\033\231\001\002\000\042\003\uffec\005\uffec\041" +
    "\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec" +
    "\053\uffec\054\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062" +
    "\uffec\001\002\000\044\003\041\005\027\034\233\041\023" +
    "\043\024\044\005\045\013\046\031\047\044\050\022\053" +
    "\036\054\045\056\011\057\046\060\012\061\042\062\034" +
    "\001\002\000\052\002\ufff2\003\ufff2\005\ufff2\034\ufff2\041" +
    "\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2" +
    "\051\ufff2\052\ufff2\053\ufff2\054\ufff2\056\ufff2\057\ufff2\060" +
    "\ufff2\061\ufff2\062\ufff2\001\002\000\004\030\236\001\002" +
    "\000\042\003\ufff0\005\ufff0\041\ufff0\043\ufff0\044\ufff0\045" +
    "\ufff0\046\ufff0\047\ufff0\050\ufff0\053\ufff0\054\ufff0\056\ufff0" +
    "\057\ufff0\060\ufff0\061\ufff0\062\ufff0\001\002\000\022\004" +
    "\132\005\136\006\131\007\137\012\140\020\133\021\135" +
    "\032\141\001\002\000\034\010\144\011\157\013\150\014" +
    "\151\016\155\017\146\022\153\023\147\024\152\025\145" +
    "\026\154\027\156\031\240\001\002\000\004\033\241\001" +
    "\002\000\042\003\uffef\005\uffef\041\uffef\043\uffef\044\uffef" +
    "\045\uffef\046\uffef\047\uffef\050\uffef\053\uffef\054\uffef\056" +
    "\uffef\057\uffef\060\uffef\061\uffef\062\uffef\001\002\000\044" +
    "\003\041\005\027\034\243\041\023\043\024\044\005\045" +
    "\013\046\031\047\044\050\022\053\036\054\045\056\011" +
    "\057\046\060\012\061\042\062\034\001\002\000\052\002" +
    "\uffda\003\uffda\005\uffda\034\uffda\041\uffda\043\uffda\044\uffda" +
    "\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053" +
    "\uffda\054\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\050\002\031\003\034\006\027\007\036\010" +
    "\005\011\024\012\017\013\025\014\037\015\020\016\042" +
    "\017\006\020\007\021\016\022\014\023\032\026\003\030" +
    "\015\031\013\001\001\000\046\003\034\006\027\007\036" +
    "\010\005\011\024\012\017\013\025\014\037\015\020\016" +
    "\042\017\241\020\007\021\016\022\014\023\032\026\003" +
    "\030\015\031\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\003\034\006\027\007\036\010\005\011\024" +
    "\012\017\013\025\014\037\015\020\016\042\020\007\021" +
    "\016\022\014\023\032\026\003\030\110\031\013\001\001" +
    "\000\046\003\034\006\027\007\036\010\005\011\024\012" +
    "\017\013\025\014\037\015\020\016\042\017\231\020\007" +
    "\021\016\022\014\023\032\026\003\030\015\031\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\003\034\006\027\007\036\010" +
    "\005\011\024\012\017\013\025\014\037\015\020\016\042" +
    "\017\216\020\007\021\016\022\014\023\032\026\003\030" +
    "\015\031\013\001\001\000\002\001\001\000\046\003\034" +
    "\006\027\007\036\010\005\011\024\012\017\013\025\014" +
    "\037\015\020\016\042\017\214\020\007\021\016\022\014" +
    "\023\032\026\003\030\015\031\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\003\034\006\027\007\036\010\005\011" +
    "\024\012\017\013\025\014\037\015\020\016\042\017\122" +
    "\020\007\021\016\022\014\023\032\026\003\030\015\031" +
    "\013\001\001\000\002\001\001\000\012\004\104\005\105" +
    "\024\101\025\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\104\005\105\025\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\034\006\027\007\036\010\005" +
    "\011\024\012\017\013\025\014\037\015\020\016\042\017" +
    "\107\020\007\021\016\022\014\023\032\026\003\030\015" +
    "\031\013\001\001\000\044\003\034\006\027\007\036\010" +
    "\005\011\024\012\017\013\025\014\037\015\020\016\042" +
    "\020\007\021\016\022\014\023\032\026\003\030\106\031" +
    "\013\001\001\000\002\001\001\000\044\003\034\006\027" +
    "\007\036\010\005\011\024\012\017\013\025\014\037\015" +
    "\020\016\042\020\007\021\016\022\014\023\032\026\003" +
    "\030\110\031\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\003\034\006\027" +
    "\007\036\010\005\011\024\012\017\013\025\014\037\015" +
    "\020\016\042\020\007\021\016\022\014\023\032\026\003" +
    "\030\110\031\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\173\001\001\000\002\001" +
    "\001\000\004\032\142\001\001\000\002\001\001\000\004" +
    "\032\172\001\001\000\004\032\171\001\001\000\004\032" +
    "\170\001\001\000\004\032\167\001\001\000\004\032\166" +
    "\001\001\000\004\032\165\001\001\000\004\032\164\001" +
    "\001\000\004\032\163\001\001\000\004\032\162\001\001" +
    "\000\004\032\161\001\001\000\004\032\160\001\001\000" +
    "\004\032\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\176" +
    "\001\001\000\002\001\001\000\004\032\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\003\034\006\027\007\036\010\005\011\024\012\017" +
    "\013\025\014\037\015\020\016\042\020\007\021\016\022" +
    "\014\023\032\026\003\030\110\031\013\001\001\000\002" +
    "\001\001\000\044\003\034\006\027\007\036\010\005\011" +
    "\024\012\017\013\025\014\037\015\020\016\042\020\007" +
    "\021\016\022\014\023\032\026\003\030\110\031\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\003\034\006\027\007" +
    "\036\010\005\011\024\012\017\013\025\014\037\015\020" +
    "\016\042\020\007\021\016\022\014\023\032\026\003\030" +
    "\110\031\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\236\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\003\034" +
    "\006\027\007\036\010\005\011\024\012\017\013\025\014" +
    "\037\015\020\016\042\020\007\021\016\022\014\023\032" +
    "\026\003\030\110\031\013\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
        System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
        data.Info.listaErroresStatpy.add(new data.Error("Error Sintactico", "No reconocido el caracter: "+ s.value,
                s.right, s.left));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
        data.Info.listaErroresStatpy.add(new data.Error("Error Sintactico", "No reconocido el caracter: "+ s.value,
                s.right, s.left));
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= lista_instr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_instr ::= lista_instr instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instr ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= tipo_if 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= tipo_while 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= tipo_for 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= tipo_switch 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= tipo_void 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= tipo_void_est 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= tipo_break PUNTOYCOMA 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= asignacion PUNTOYCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 statpy.Parser.resultado= statpy.Parser.resultado+val.toString()+" \n" ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= impresion PUNTOYCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 statpy.Parser.resultado= statpy.Parser.resultado+val.toString()+" \n" ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // impresion ::= CONSOLE PUNTO WRITE PARENTESIS_A expresion PARENTESIS_C 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= "print("+ val.toString()+")";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_if ::= instr_if lista_instr LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_if",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instr_if ::= IF PARENTESIS_A expresion PARENTESIS_C LLAVE_A 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 statpy.Parser.resultado += val.toString()+" " + var.toString() + ":\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_if",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instr_if ::= ELSE LLAVE_A 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 statpy.Parser.resultado += val.toString()+ ":\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_if",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instr_if ::= ELSE IF PARENTESIS_A expresion PARENTESIS_C LLAVE_A 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 statpy.Parser.resultado += "elif "+var.toString()+ ":\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_if",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_while ::= instr_while lista_instr LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_while",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo_while ::= instr_do lista_instr LLAVE_C WHILE PARENTESIS_A expresion PARENTESIS_C PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 statpy.Parser.resultado += var.toString()+" " + ":\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_while",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instr_while ::= WHILE PARENTESIS_A expresion PARENTESIS_C LLAVE_A 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 statpy.Parser.resultado += val.toString()+" " + var.toString() + ":\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_while",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instr_do ::= DO LLAVE_A 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 statpy.Parser.resultado += "while"+" " + ":\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_do",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo_for ::= instr_for lista_instr LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_for",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instr_for ::= FOR PARENTESIS_A tipo_dato ID IGUAL ENTERO PUNTOYCOMA ID comparadores ENTERO PUNTOYCOMA ID MAS MAS PARENTESIS_C LLAVE_A 
            {
              Object RESULT =null;
		int palleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int palright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		String pal = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int inileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String ini = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int finright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String fin = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 statpy.Parser.resultado += pal.toString()+" " + nombre.toString() +" in range("+ ini.toString()+","+fin.toString()+")"+ ":\n";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_for",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo_switch ::= print_switch instr_switch LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_switch",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // print_switch ::= SWITCH PARENTESIS_A expresion PARENTESIS_C LLAVE_A 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 statpy.Parser.resultado +="def "+ val.toString()+" ("+var.toString()+ "):\n"+"switcher = {\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_switch",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instr_switch ::= instr_switch instr_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_switch",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instr_switch ::= instr_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_switch",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instr_case ::= print_case lista_instr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_case",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instr_case ::= print_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_case",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instr_case ::= print_default instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_case",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // print_case ::= CASE ENTERO DOSPUNTOS ID IGUAL ENTERO PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 statpy.Parser.resultado +=var.toString()+": "+val.toString()+" = "+var2.toString()+ ",\n";
                            data.Info.ultimoCase=Integer.parseInt(var);
                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_case",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // print_default ::= DEFAULT DOSPUNTOS 
            {
              Object RESULT =null;
		 data.Info.ultimoCase++; statpy.Parser.resultado += data.Info.ultimoCase+": "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_default",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipo_dato ::= INT 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipo_dato ::= DOUBLE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipo_dato ::= CHAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipo_dato ::= BOOL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipo_dato ::= STRING 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipo_void ::= instr_void lista_instr LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_void",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instr_void ::= VOID MAIN PARENTESIS_A PARENTESIS_C LLAVE_A 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 statpy.Parser.resultado +="def"+" " +var.toString()+ "():\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_void",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipo_break ::= BREAK 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 statpy.Parser.resultado += var.toString()+ "\n";  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_break",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // asignacion ::= tipo_dato ID IGUAL expresion 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= nombre.toString()+" "+signo.toString()+" "+var.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignacion ::= ID IGUAL expresion 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= nombre.toString()+" "+signo.toString()+" "+var.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asignacion ::= tipo_dato ID 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= nombre.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comparadores ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparadores",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comparadores ::= MAYOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparadores",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comparadores ::= MENOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparadores",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comparadores ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparadores",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a.toString()+" + "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion POR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a.toString()+" * "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion DIVISION expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a.toString()+" / "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a.toString()+" - "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion MAYOR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a.toString()+" > "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= expresion MENOR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a.toString()+" < "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= expresion MAYORIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a.toString()+" >= "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= expresion MENORIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a.toString()+" <= "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= expresion IGUALIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a.toString()+" == "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= expresion DISTINTO expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a.toString()+" != "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= NOT expresion 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = " not "+a.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= expresion AND expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a.toString()+" and "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= expresion OR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a.toString()+" or "+b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= TRUE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= FALSE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= TEXTOENTRECOMILLAS 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= TEXTOENTRECOMILLAS MAS expresion 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =val.toString()+" , "+a.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= TCHAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
